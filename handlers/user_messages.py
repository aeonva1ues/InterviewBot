from datetime import datetime

from database.active_table import get_active_table_name
from database.psqlExecutor import insert_into, search_user, count
from interview_questions.questions import get_question
from keyboards.default_keyboards import (fifth_question_keyboard,
                                         first_question_keyboard,
                                         fourth_question_keyboard,
                                         hide_keyboard,
                                         second_more_question_keyboard,
                                         start_keyboard,
                                         third_question_keyboard)
from user.data import User

from . import bot


@bot.message_handler(commands=['start'])
def start_message(message):
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
    # –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∏–ª–∏ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ.
    bots_message = get_question('[START]')
    bot.send_message(
        message.chat.id,
        bots_message,
        reply_markup=start_keyboard
    )


@bot.message_handler(commands=['help'])
def help_command(message):
    bots_message = get_question('[HELP]')
    return bot.send_message(
        message.chat.id,
        bots_message,
    )


@bot.message_handler(commands=['terms'])
def terms_command(message):
    file = open(r'media\–¢–µ—Ä–º–∏–Ω—ã.txt', 'r', encoding='utf-8')
    bot.send_message(message.chat.id, file)
    file.close()


@bot.message_handler(commands=['links'])
def links_command(message):
    file = open(r'media\–°—Å—ã–ª–∫–∏.txt', 'r', encoding='utf-8')
    bot.send_message(message.chat.id, file)
    file.close()


@bot.message_handler(commands=['description'])
def description_command(message):
    bots_message = get_question('[DESCRIPTION]')
    return bot.send_message(
        message.chat.id,
        bots_message,
    )


@bot.message_handler(commands=['interview'])
def interview_command(message):
    file = open(r'media\–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 1.docx', 'rb')
    bot.send_message(message.chat.id, file)
    file.close()


@bot.message_handler(commands=['iresults'])
def iresults_command(message):
    db_notes_count = count(get_active_table_name())
    bots_message = get_question('[IRESULTS]') % str(db_notes_count)
    return bot.send_message(
        message.chat.id,
        bots_message,
    )


@bot.message_handler(commands=['pytpr'])
def pytpr_command(message):
    file = open(r'media\–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 2.docx', 'rb')
    bot.send_message(message.chat.id, file)
    file.close()


@bot.message_handler(commands=['theses'])
def theses_command(message):
    file = open(r'media\–¢–µ–∑–∏—Å—ã.docx', 'rb')
    bot.send_message(message.chat.id, file)
    file.close()


@bot.message_handler(content_types=['text'])
def first_question(message):
    if message.text == 'üü© –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å üü©':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ —Ä–∞–Ω–µ–µ
        this_user_in_db = search_user(
            {
                'table_name': get_active_table_name(),
                'user_id': str(message.from_user.id)
            })
        if this_user_in_db:
            return bot.send_message(message.chat.id, (
                        '–ü–æ—Ö–æ–∂–µ, –≤—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å. '
                        '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!\n'
                        '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help'
                    )
            )
        user = User(message.from_user.id)
        bots_message = get_question('[FIRST_QUESTION]')
        return bot.register_next_step_handler(
            bot.send_message(
                    message.chat.id,
                    bots_message,
                    reply_markup=first_question_keyboard),
            second_question,
            user)


def second_question(message, user):
    if message.text not in ['–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç',
                            (
                                '–ö–æ–≥–¥–∞ –¥–∞–≤–∞–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ä–æ–∫–∞—Ö ‚Äì —Ä–µ—à–∞–ª, '
                                '–Ω–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è'),
                            (
                                '–ù–µ–º–Ω–æ–≥–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω, –ª—é–±–æ–ø—ã—Ç–Ω–æ —Å–ª–µ–¥–∏—Ç—å '
                                '–∑–∞ –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏ –≤ IT-–∏–Ω–¥—É—Å—Ç—Ä–∏–∏'),
                            (
                                '–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω. –ü—Ä–æ—Ö–æ–¥–∏–ª/–ø—Ä–æ—Ö–æ–∂—É –∫—É—Ä—Å—ã, '
                                '—á–∏—Ç–∞–ª/—á–∏—Ç–∞—é –∫–Ω–∏–≥–∏ –∏ –ø—Ä–∞–∫—Ç–∏–∫—É—é—Å—å')
                            ]:
        return bot.register_next_step_handler(
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö',
                reply_markup=first_question_keyboard),
            second_question,
            user)
    user.set_answer(1, message.text)
    bots_message = get_question('[SECOND_QUESTION]')
    return bot.register_next_step_handler(
        bot.send_message(
            message.chat.id,
            bots_message,
            reply_markup=hide_keyboard),
        check_second_answer,
        user)


def check_second_answer(message, user):
    user.set_answer(2, message.text)
    if message.text == '-':
        user.set_answer(21, '-')
        bots_message = get_question('[THIRD_QUESTION]')
        return bot.register_next_step_handler(
            bot.send_message(
                message.chat.id,
                bots_message,
                reply_markup=third_question_keyboard),
            third_question,
            user)
    bots_message = get_question('[SECOND+_QUESTION]')
    return bot.register_next_step_handler(
        bot.send_message(
            message.chat.id,
            bots_message,
            reply_markup=second_more_question_keyboard),
        second_more_question,
        user)


def second_more_question(message, user):
    if message.text not in [
        '–ù–µ—Ç, —Ç–æ–ª—å–∫–æ —Å–ª—ã—à–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ',
        '–ü–µ—Ä–µ—á–∏—Å–ª–∏–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–æ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞–ª—Å—è –Ω–µ –Ω–∞ –≤—Å–µ—Ö',
        '–î–∞'
    ]:
        return bot.register_next_step_handler(
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö',
                reply_markup=second_more_question_keyboard),
            second_more_question,
            user)
    user.set_answer(21, message.text)
    bots_message = get_question('[THIRD_QUESTION]')
    return bot.register_next_step_handler(
        bot.send_message(
            message.chat.id,
            bots_message,
            reply_markup=third_question_keyboard),
        third_question,
        user)


def third_question(message, user):
    if message.text not in [
        '–ù–∏–∫–∞–∫, –∏—Ö –Ω–µ—Ç',
        '–û—á–µ–Ω—å —Å–ª–∞–±—ã–µ –∑–Ω–∞–Ω–∏—è, –Ω–µ –¥–æ—Ç—è–≥–∏–≤–∞—é –¥–æ –±–∞–∑—ã',
        '–ü–æ–Ω–∏–º–∞—é –æ—Å–Ω–æ–≤—ã, —Ç–∞–∫ –Ω–∞–∑—ã–≤–∞–µ–º—É—é –±–∞–∑—É',
        '–ú–æ–≥—É —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å —É—Ä–æ–∫–æ–≤/–æ–ª–∏–º–ø–∏–∞–¥',
        (
            '–ú–æ–≥—É —É–≤–µ—Ä–µ–Ω–Ω–æ –ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ '
            '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (backend, frontend, data science –∏ –¥—Ä.)'
            )
    ]:
        return bot.register_next_step_handler(
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö',
                reply_markup=third_question_keyboard),
            third_question,
            user)
    user.set_answer(3, message.text)
    bots_message = get_question('[FOURTH_QUESTION]')
    return bot.register_next_step_handler(
        bot.send_message(
            message.chat.id,
            bots_message,
            reply_markup=fourth_question_keyboard),
        fourth_question,
        user)


def fourth_question(message, user):
    if message.text in [
        (
            '–ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ —ç—Ç–æ–º. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —É—á–µ–±–Ω–∏–∫–æ–≤ / –æ—Ç '
            '—É—á–∏—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –º–µ–Ω—è —Å —Ç—Ä—É–¥–æ–º'),
        '–ß–∞—Å—Ç–∏—á–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏–º–µ—é, –Ω–æ –Ω–∞ —É—Ä–æ–∫–∞—Ö —ç—Ç–æ —Å–∫—É—á–Ω–æ –¥–ª—è –º–µ–Ω—è',
        '–ü–æ–Ω–∏–º–∞—é —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –∏–∑—É—á–∞–µ–º. –ù–∞ —É—Ä–æ–∫–∞—Ö –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ'
    ]:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 5-—ã–π –≤–æ–ø—Ä–æ—Å
        user.set_answer(4, message.text)
        user.set_answer(41, '-')
        bots_message = get_question('[FIFTH_QUESTION]')
        bot.register_next_step_handler(
            bot.send_message(
                message.chat.id,
                bots_message,
                reply_markup=fifth_question_keyboard),
            fifth_question,
            user)
    elif message.text in [
        ('–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. '
            '–í —à–∫–æ–ª–µ –º—ã –∏—Ö –Ω–µ –∏–∑—É—á–∞–ª–∏'),
        ('–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –¥—Ä—É–≥–∞—è –ø–æ–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫–Ω–∏–≥, '
            '–Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞–º–∏ –∏–ª–∏ –∏–∑ –∫—É—Ä—Å–æ–≤'),
        '–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –¥—Ä—É–≥–æ–≥–æ –ø–ª–∞–Ω–∞'
    ]:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 4.1 –≤–æ–ø—Ä–æ—Å
        user.set_answer(4, message.text)
        bots_message = get_question('[FOURTH+_QUESTION]')
        bot.register_next_step_handler(
            bot.send_message(
                message.chat.id,
                bots_message,
                reply_markup=hide_keyboard),
            fourth_more_question,
            user)
    else:
        return bot.register_next_step_handler(
            bot.send_message(
                message.chat.id,
                '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö',
                reply_markup=fourth_question_keyboard),
            fourth_question,
            user)


def fourth_more_question(message, user):
    user.set_answer(41, message.text)
    bots_message = get_question('[FIFTH_QUESTION]')
    bot.register_next_step_handler(
        bot.send_message(
            message.chat.id,
            bots_message,
            reply_markup=fifth_question_keyboard),
        fifth_question,
        user)


def fifth_question(message, user):
    user.set_answer(5, message.text)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–¥
    insert_into({
            'table_name': get_active_table_name(),
            'tg_id': user.user_id,
            'a1': user.answers['a1'],
            'a2': user.answers['a2'],
            'a21': user.answers['a21'],
            'a3': user.answers['a3'],
            'a4': user.answers['a4'],
            'a41': user.answers['a41'],
            'a5': user.answers['a5'],
            'date': str(datetime.now())
        })
    bots_message = get_question('[LAST_MESSAGE]')
    bot.send_message(message.chat.id, bots_message, reply_markup=hide_keyboard)
